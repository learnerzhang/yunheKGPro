"""
Django settings for yunheKGPro project.

Generated by 'django-admin startproject' using Django 3.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from pathlib import Path
import colorlog
import pymysql
import sys
import os
import logging
import yaml
pymysql.install_as_MySQLdb()

DEBUG = True

# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent
logger = logging.getLogger('kgproj')

# 获取自定义配置参数，如果没有设置则使用默认值
CONFIG_NAME = os.environ.get('CONFIG_NAME', 'local')

if sys.platform.startswith('linux'):
    CONFIG_FILE = os.path.join("configs", 'config.yaml')
    logger.debug('当前系统为 Linux')
elif sys.platform.startswith('win'):
    CONFIG_FILE = os.path.join("configs", f'config_{CONFIG_NAME}.yaml')
    logger.debug('当前系统为 Windows')
elif sys.platform.startswith('darwin'):
    logger.debug('当前系统为 macOS')
else:
    logger.debug('无法识别当前系统')
# 读取 yaml 配置文件
try:
    with open(CONFIG_FILE, 'r') as f:
        config = yaml.safe_load(f)
except FileNotFoundError:
    print("配置文件未找到，请检查路径。")
    config = {}

LOG_LEVEL = config.get('LOG_LEVEL', 'DEBUG')

print('====>当前日志级别为 %s <====' % LOG_LEVEL)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'colored': {
            '()': 'colorlog.ColoredFormatter',
            'format': '%(log_color)s%(asctime)s %(levelname)s [%(module)s] [%(process)d-%(thread)d] %(message)s',
            'log_colors': {
                'DEBUG': 'cyan',
                'INFO': 'green',
                'WARNING': 'yellow',
                'ERROR': 'red',
                'CRITICAL': 'red,bg_white',
            },
        },
        'verbose': {
            'format': '%(asctime)s %(levelname)s [%(module)s] [%(process)d-%(thread)d] %(message)s',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': LOG_LEVEL,
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'colored'
        },
        'file': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'debug.log',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'kgproj': {
            'handlers': ['console', 'file'],
            'level': LOG_LEVEL,
            'filename': 'debug.log',
            'maxBytes': 1024 * 1024 * 5,  # 5MB
            'backupCount': 5,
            'formatter':'verbose',
        },
    }
}

if config.get('USE_LOCAL_MODEL', False):
    from langchain.embeddings import HuggingFaceEmbeddings
    MODEL_PATH = config.get('MODEL_PATH', "D:\\data\\models\\bge-large-zh")
    embedding = HuggingFaceEmbeddings(
        # model_name="BAAI/bge-small-zh-v1.5",
        model_name=MODEL_PATH,
        model_kwargs={'device': 'cpu'},
        encode_kwargs={
            'batch_size': 64,
            'normalize_embeddings': True
        }
    )
    print('====>使用本地模型 %s <====' % LOG_LEVEL)
else:
    embedding = None
    print('====>不使用本地模型 %s <====' % LOG_LEVEL)


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
#
default_db_config = config['DATABASES']['default']
DB_HOST=default_db_config.get('HOST')
DB_NAME=default_db_config.get('NAME')
DB_USER=default_db_config.get('USER')
DB_PORT=default_db_config.get('PORT')
DB_PASSWORD=default_db_config.get('PASSWORD')

# DB_HOST = os.environ.get('DB_HOST', DBHOST)
# DB_NAME = os.environ.get('DB_NAME', DBNAME)
# DB_PORT = os.environ.get('DB_PORT', DBPORT)
# DB_USER = os.environ.get('DB_USER', DBUSER)
# DB_PASSWORD = os.environ.get('DB_PASSWORD', DBPASSWORD)

NEO4J_URI=config.get('NEO4J_URI', "bolt://127.0.0.1:7687")
NEO4J_USERNAME=config.get('NEO4J_USERNAME', "neo4j")
NEO4J_PASSWORD=config.get('NEO4J_PASSWORD', "12345678")
REDIS_URL=config.get('REDIS_URL', "redis://127.0.0.1:6379/0")


NEOMODEL_NEO4J_BOLT_URL = os.environ.get('NEO4J_URI', NEO4J_URI)
NEOMODEL_USERNAME = os.environ.get('NEO4J_USERNAME', NEO4J_USERNAME)
NEOMODEL_PASSWORD = os.environ.get('NEO4J_PASSWORD', NEO4J_PASSWORD)
REDIS_URL = os.environ.get('REDIS_URL', REDIS_URL)



ES_HOST = os.environ.get('ES_HOST', "127.0.0.1")
ES_PORT = os.environ.get('ES_PORT', "9200")
ES_URL = os.environ.get('ES_URL', "http://127.0.0.1:9200")
ES_USER = os.environ.get('ES_USER', "elastic")
ES_PWD = os.environ.get('ES_PWD', "elastic")


WKING_PATH = config.get('WKING_PATH', "D:\\software\\wkhtmltopdf\\bin\\wkhtmltoimage.exe")
MODEL_PATH = config.get('MODEL_PATH', "D:\\data\\models\\bge-large-zh-v1.5")
TTF_PATH = config.get('TTF_PATH', "arial.ttf")
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
    }
}

print('====>当前数据库为 %s <====' % DB_NAME)
print('====>当前数据库用户名为 %s <====' % DB_USER)
print('====>当前数据库密码为 %s <====' % DB_PASSWORD)
print('====>当前数据库主机为 %s <====' % DB_HOST)
print('====>当前数据库端口为 %s <====' % DB_PORT)

ELASTICSEARCH_DSL = {
    'default': {
        'hosts': ES_URL,
        'http_auth': (ES_USER, ES_PWD)
    },
}


# 预案模板的位置
YUAN_TEMPLET_PATH = config.get('YUAN_TEMPLET_PATH', 'data/yuan_templet/yuan_v1.json')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.get('SECRET_KEY', 'django-insecure-r&6c!_n9591qjq1&h6w4&!b%yk7l_%$dw2n8_k&++q#@0nh&vc')

# SECURITY WARNING: don't run with debug turned on in production!
CORS_ORIGIN_ALLOW_ALL = config.get('CORS_ORIGIN_ALLOW_ALL', True)

CSRF_TRUSTED_ORIGINS = config.get('CSRF_TRUSTED_ORIGINS', ["*"])

DATA_UPLOAD_MAX_NUMBER_FIELDS = config.get('DATA_UPLOAD_MAX_NUMBER_FIELDS', 10000)
DATA_UPLOAD_MAX_MEMORY_SIZE = config.get('DATA_UPLOAD_MAX_MEMORY_SIZE', 52428800)
FILE_UPLOAD_MAX_MEMORY_SIZE = config.get('FILE_UPLOAD_MAX_MEMORY_SIZE', 10485760)  # 10MB

ALLOWED_HOSTS = config.get('ALLOWED_HOSTS', ["*"])

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-r&6c!_n9591qjq1&h6w4&!b%yk7l_%$dw2n8_k&++q#@0nh&vc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
CORS_ORIGIN_ALLOW_ALL = True
CSRF_TRUSTED_ORIGINS = ["*"]
ALLOWED_HOSTS = ['*']

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240

# Application definition

INSTALLED_APPS = [
    "simpleui",
    "django_apscheduler",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "rest_framework",
    'rest_framework_swagger', 
    'ckeditor',
    'DjangoUeditor',
    'formtools',
    'xadmin',
    'crispy_forms',
    'crispy_bootstrap3',
    # 'reversion',
    "drf_yasg",
    "django_elasticsearch_dsl",
    'userapp',
    'yaapp',
    'import_export',
    'apiapp', 'kgapp', 'modelapp', 'logapp','dataapp',
    'django_celery_results',  # celery结果
    'django_celery_beat',     # celery定时任务
]

# 修改xadmin的站点标题
XADMIN_SITE_NAME = '知识库管理平台'
SITE_NAME = '知识库管理平台'

CRISPY_TEMPLATE_PACK = 'bootstrap3'

SWAGGER_SETTINGS = {
    # 基础样式
    'SECURITY_DEFINITIONS': {
        "basic":{
            'type': 'basic'
        }
    },
    # 如果需要登录才能够查看接口文档, 登录的链接使用restframework自带的.
    'LOGIN_URL': 'rest_framework:login',
    'LOGOUT_URL': 'rest_framework:logout',
    # 'DOC_EXPANSION': None,
    # 'SHOW_REQUEST_HEADERS':True,
    # 'USE_SESSION_AUTH': True,
    # 'DOC_EXPANSION': 'list',
    # 接口文档中方法列表以首字母升序排列
    'APIS_SORTER': 'alpha',
    # 如果支持json提交, 则接口文档中包含json输入框
    'JSON_EDITOR': True,
    # 方法列表字母排序
    'OPERATIONS_SORTER': 'alpha',
    'VALIDATOR_URL': None,
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #  'logapp.middleware.LoggingMiddleware'
]

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema', 
}
# 将其设置为False，效果如下图

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False, 
}
X_FRAME_OPTIONS = 'SAMEORIGIN'

ROOT_URLCONF = 'yunheKGPro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'yunheKGPro.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

USE_I18N = True

USE_L10N = True

USE_TZ = True

X_FRAME_OPTIONS = ''
    
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/data/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR,'data'),
)
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 项目下的目录
MEDIA_URL = "/media/"  # 跟STATIC_URL类似，指定用户可以通过这个url找到文件

AUTH_USER_MODEL = 'userapp.User'

# 最重要的配置，设置消息broker,格式为：db://user:password@host:port/dbname
# 如果redis安装在本机，使用localhost
# 如果docker部署的redis，使用redis://redis:6379
# CELERY_BROKER_URL = "redis://127.0.0.1:6379/0"
CELERY_BROKER_URL = REDIS_URL
# celery时区设置，建议与Django settings中TIME_ZONE同样时区，防止时差
# Django设置时区需同时设置USE_TZ=True和TIME_ZONE = 'Asia/Shanghai'
CELERY_TIMEZONE = TIME_ZONE
 # 为django_celery_results存储Celery任务执行结果设置后台
 # 格式为：db+scheme://user:password@host:port/dbname
 # 支持数据库django-db和缓存django-cache存储任务状态及结果
CELERY_RESULT_BACKEND = "django-db"
# celery内容等消息的格式设置，默认json
CELERY_ACCEPT_CONTENT = ['application/json', ]
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
# 为任务设置超时时间，单位秒。超时即中止，执行下个任务。
CELERY_TASK_TIME_LIMIT = 5
# 为存储结果设置过期日期，默认1天过期。如果beat开启，Celery每天会自动清除。
# 设为0，存储结果永不过期
CELERY_RESULT_EXPIRES = 0
# 任务限流
CELERY_TASK_ANNOTATIONS = {'tasks.add': {'rate_limit': '10/s'}}
CELERY_TASK_ANNOTATIONS = {'tasks.loadKgFromDoc': {'rate_limit': '10/s'}}
# Worker并发数量，一般默认CPU核数，可以不设置
CELERY_WORKER_CONCURRENCY = 2
# 每个worker执行了多少任务就会死掉，默认是无限的
CELERY_WORKER_MAX_TASKS_PER_CHILD = 200
