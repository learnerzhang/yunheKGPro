"""
Django settings for yunheKGPro project.

Generated by 'django-admin startproject' using Django 3.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from pathlib import Path
import pymysql
import sys
import os
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"

pymysql.install_as_MySQLdb()

DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#   - DEBUG=0
#   - DB_HOST=db
#   - DB_NAME=kgproj
#   - DB_USER=root
#   - DB_PORT=3306
#   - DB_PASSWORD=20221qaz@WSX
#   - NEO4J_URI=bolt://neo4j:7687
#   - NEO4J_USERNAME=neo4j
#   - NEO4J_PASSWORD=12345678
#   - REDIS_URL=redis://redis:6379

NEOMODEL_NEO4J_BOLT_URL = os.environ.get('NEO4J_URI', "bolt://127.0.0.1:7687")
NEOMODEL_USERNAME = os.environ.get('NEO4J_USERNAME', "neo4j")
NEOMODEL_PASSWORD = os.environ.get('NEO4J_PASSWORD', "12345678")

REDIS_URL = os.environ.get('REDIS_URL', "redis://127.0.0.1:6379/0")

DB_HOST = os.environ.get('DB_HOST', "127.0.0.1")
DB_NAME = os.environ.get('DB_NAME', "kgproj")
DB_PORT = os.environ.get('DB_PORT', "3306")
DB_USER = os.environ.get('DB_USER', "root")
DB_PASSWORD = os.environ.get('DB_PASSWORD', "20221qaz@WSX")

ES_HOST = os.environ.get('ES_HOST', "127.0.0.1")
ES_PORT = os.environ.get('ES_PORT', "9200")
ES_URL = os.environ.get('ES_URL', "http://127.0.0.1:9200")
ES_USER = os.environ.get('ES_USER', "elastic")
ES_PWD = os.environ.get('ES_PWD', "elastic")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-r&6c!_n9591qjq1&h6w4&!b%yk7l_%$dw2n8_k&++q#@0nh&vc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
CORS_ORIGIN_ALLOW_ALL = True
CSRF_TRUSTED_ORIGINS = ["*"]
ALLOWED_HOSTS = ['*']

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240

# Application definition

INSTALLED_APPS = [
    "simpleui",
    "django_apscheduler",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "rest_framework",
    'rest_framework_swagger', 
    'ckeditor',
    "drf_yasg",
    "django_elasticsearch_dsl",
    'userapp',
    'yaapp',
    'apiapp', 'kgapp', 'modelapp', 'logapp','dataapp',
    'django_celery_results',  # celery结果
    'django_celery_beat',     # celery定时任务
]

SWAGGER_SETTINGS = {
    # 基础样式
    'SECURITY_DEFINITIONS': {
        "basic":{
            'type': 'basic'
        }
    },
    # 如果需要登录才能够查看接口文档, 登录的链接使用restframework自带的.
    'LOGIN_URL': 'rest_framework:login',
    'LOGOUT_URL': 'rest_framework:logout',
    # 'DOC_EXPANSION': None,
    # 'SHOW_REQUEST_HEADERS':True,
    # 'USE_SESSION_AUTH': True,
    # 'DOC_EXPANSION': 'list',
    # 接口文档中方法列表以首字母升序排列
    'APIS_SORTER': 'alpha',
    # 如果支持json提交, 则接口文档中包含json输入框
    'JSON_EDITOR': True,
    # 方法列表字母排序
    'OPERATIONS_SORTER': 'alpha',
    'VALIDATOR_URL': None,
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'logapp.middleware.LoggingMiddleware'
]

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema', 
}
# 将其设置为False，效果如下图

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False, 
}
X_FRAME_OPTIONS = 'SAMEORIGIN'

ROOT_URLCONF = 'yunheKGPro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'yunheKGPro.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'kgproj',
        'USER': 'root',
        'PASSWORD': '20221qaz@WSX',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}

ELASTICSEARCH_DSL = {
    'default': {
        'hosts': ES_URL,
        'http_auth': (ES_USER, ES_PWD)
    },
}


TTF_PATH = "arial.ttf"
if sys.platform.startswith('linux'):
    DATA_DIR_PATH = "/data/nmc"
    TTF_PATH = "/usr/share/fonts/dejavu/DejaVuSans.ttf"
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': DB_NAME,
            'USER': DB_USER,
            'PASSWORD': DB_PASSWORD,
            'HOST': DB_HOST,
            'PORT': DB_PORT,
        }
    }

    ELASTICSEARCH_DSL = {
        'default': {
            'hosts': ES_URL,
            'http_auth': (ES_USER, ES_PWD)
        },
    }
    

    print('当前系统为 Linux')
elif sys.platform.startswith('win'):
    DATA_DIR_PATH = "D:\\data\\nmc\\"
    TTF_PATH = "arial.ttf"
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'kgproj',
            'USER': 'root',
            'PASSWORD': '123456',
            'HOST': '127.0.0.1',
            'PORT': '3306',
        }
    }
    ELASTICSEARCH_DSL = {
    'default': {
        'hosts': 'http://localhost:9200',
        'http_auth': (ES_USER, ES_PWD)
    },
}
    print('当前系统为 Windows')
elif sys.platform.startswith('darwin'):
    print('当前系统为 macOS')
else:
    print('无法识别当前系统')

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

USE_I18N = True

USE_L10N = True

USE_TZ = True

X_FRAME_OPTIONS = ''
    
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR,'static'),
)
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 项目下的目录
MEDIA_URL = "/media/"  # 跟STATIC_URL类似，指定用户可以通过这个url找到文件

AUTH_USER_MODEL = 'userapp.User'

# 最重要的配置，设置消息broker,格式为：db://user:password@host:port/dbname
# 如果redis安装在本机，使用localhost
# 如果docker部署的redis，使用redis://redis:6379
# CELERY_BROKER_URL = "redis://127.0.0.1:6379/0"
CELERY_BROKER_URL = REDIS_URL
# celery时区设置，建议与Django settings中TIME_ZONE同样时区，防止时差
# Django设置时区需同时设置USE_TZ=True和TIME_ZONE = 'Asia/Shanghai'
CELERY_TIMEZONE = TIME_ZONE
 # 为django_celery_results存储Celery任务执行结果设置后台
 # 格式为：db+scheme://user:password@host:port/dbname
 # 支持数据库django-db和缓存django-cache存储任务状态及结果
CELERY_RESULT_BACKEND = "django-db"
# celery内容等消息的格式设置，默认json
CELERY_ACCEPT_CONTENT = ['application/json', ]
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
# 为任务设置超时时间，单位秒。超时即中止，执行下个任务。
CELERY_TASK_TIME_LIMIT = 5
# 为存储结果设置过期日期，默认1天过期。如果beat开启，Celery每天会自动清除。
# 设为0，存储结果永不过期
CELERY_RESULT_EXPIRES = 0
# 任务限流
CELERY_TASK_ANNOTATIONS = {'tasks.add': {'rate_limit': '10/s'}}
CELERY_TASK_ANNOTATIONS = {'tasks.loadKgFromDoc': {'rate_limit': '10/s'}}
# Worker并发数量，一般默认CPU核数，可以不设置
CELERY_WORKER_CONCURRENCY = 2
# 每个worker执行了多少任务就会死掉，默认是无限的
CELERY_WORKER_MAX_TASKS_PER_CHILD = 200
